"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _getData = _interopRequireDefault(require("./getData.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const props = [{
  type: 'unchenged',
  check: (before, after, key) => _lodash.default.has(before, key) && _lodash.default.has(after, key) && before[key] === after[key],
  process: before => before,
  prefix: '   '
}, {
  type: 'chenged',
  check: (before, after, key) => _lodash.default.has(before, key) && _lodash.default.has(after, key) && before[key] !== after[key],
  process: (before, after) => ({
    beforeValue: before,
    afterValue: after
  }),
  prefix: '  +'
}, {
  type: 'added',
  check: (before, after, key) => !_lodash.default.has(before, key) && _lodash.default.has(after, key),
  process: (before, after) => after,
  prefix: '  +'
}, {
  type: 'deleted',
  check: (before, after, key) => _lodash.default.has(before, key) && !_lodash.default.has(after, key),
  process: before => before,
  prefix: '  -'
}];

const parse = (before, after) => {
  const tempObj = { ...before,
    ...after
  };

  const configKeys = _lodash.default.keys(tempObj);

  const getProps = key => props.find(({
    check
  }) => check(before, after, key));

  return configKeys.map(key => {
    const {
      prefix,
      type,
      process
    } = getProps(key);
    const value = process(before[key], after[key], parse);
    return {
      key,
      type,
      value,
      prefix
    };
  });
};

const render = tree => {
  const renderString = tree.map(node => {
    const {
      key,
      type,
      value,
      prefix
    } = node;
    const renderType = {
      unchenged: `${prefix} ${key}: ${value}`,
      chenged: `${prefix} ${key}: ${value.beforeValue}\n  - ${key}: ${value.afterValue}`,
      added: `${prefix} ${key}: ${value}`,
      deleted: `${prefix} ${key}: ${value}`
    };
    return renderType[node.type];
  });
  const renderBody = `{\n${renderString.join('\n')}\n}`;
  return renderBody;
};

const genDiff = (firstConfig = {}, secondConfig = {}) => {
  const before = (0, _getData.default)(firstConfig);
  const after = (0, _getData.default)(secondConfig);
  const ast = parse(before, after);
  return render(ast);
};

var _default = genDiff;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9wcyIsInR5cGUiLCJjaGVjayIsImJlZm9yZSIsImFmdGVyIiwia2V5IiwiXyIsImhhcyIsInByb2Nlc3MiLCJwcmVmaXgiLCJiZWZvcmVWYWx1ZSIsImFmdGVyVmFsdWUiLCJwYXJzZSIsInRlbXBPYmoiLCJjb25maWdLZXlzIiwia2V5cyIsImdldFByb3BzIiwiZmluZCIsIm1hcCIsInZhbHVlIiwicmVuZGVyIiwidHJlZSIsInJlbmRlclN0cmluZyIsIm5vZGUiLCJyZW5kZXJUeXBlIiwidW5jaGVuZ2VkIiwiY2hlbmdlZCIsImFkZGVkIiwiZGVsZXRlZCIsInJlbmRlckJvZHkiLCJqb2luIiwiZ2VuRGlmZiIsImZpcnN0Q29uZmlnIiwic2Vjb25kQ29uZmlnIiwiYXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcsQ0FDWjtBQUNFQyxFQUFBQSxJQUFJLEVBQUUsV0FEUjtBQUVFQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQWdCQyxHQUFoQixLQUF5QkMsZ0JBQUVDLEdBQUYsQ0FBTUosTUFBTixFQUFjRSxHQUFkLEtBQXNCQyxnQkFBRUMsR0FBRixDQUFNSCxLQUFOLEVBQWFDLEdBQWIsQ0FBdEIsSUFBNENGLE1BQU0sQ0FBQ0UsR0FBRCxDQUFOLEtBQWdCRCxLQUFLLENBQUNDLEdBQUQsQ0FGbkc7QUFHRUcsRUFBQUEsT0FBTyxFQUFHTCxNQUFELElBQVlBLE1BSHZCO0FBSUVNLEVBQUFBLE1BQU0sRUFBRTtBQUpWLENBRFksRUFPWjtBQUNFUixFQUFBQSxJQUFJLEVBQUUsU0FEUjtBQUVFQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQWdCQyxHQUFoQixLQUF5QkMsZ0JBQUVDLEdBQUYsQ0FBTUosTUFBTixFQUFjRSxHQUFkLEtBQXNCQyxnQkFBRUMsR0FBRixDQUFNSCxLQUFO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LEtBQUssRUFBRyxHQUFFbEIsTUFBTyxJQUFHSixHQUFJLEtBQUljLEtBQU0sRUFIakI7QUFJakJTLE1BQUFBLE9BQU8sRUFBRyxHQUFFbkIsTUFBTyxJQUFHSixHQUFJLEtBQUljLEtBQU07QUFKbkIsS0FBbkI7QUFNQSxXQUFPSyxVQUFVLENBQUNELElBQUksQ0FBQ3RCLElBQU4sQ0FBakI7QUFDRCxHQVhvQixDQUFyQjtBQWFBLFFBQU00QixVQUFVLEdBQUksTUFBS1AsWUFBWSxDQUFDUSxJQUFiLENBQWtCLElBQWxCLENBQXdCLEtBQWpEO0FBQ0EsU0FBT0QsVUFBUDtBQUNELENBaEJEOztBQWtCQSxNQUFNRSxPQUFPLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHLEVBQWYsRUFBbUJDLFlBQVksR0FBRyxFQUFsQyxLQUF5QztBQUN2RCxRQUFNOUIsTUFBTSxHQUFHLHNCQUFRNkIsV0FBUixDQUFmO0FBQ0EsUUFBTTVCLEtBQUssR0FBRyxzQkFBUTZCLFlBQVIsQ0FBZDtBQUNBLFFBQU1DLEdBQUcsR0FBR3RCLEtBQUssQ0FBQ1QsTUFBRCxFQUFTQyxLQUFULENBQWpCO0FBQ0EsU0FBT2dCLE1BQU0sQ0FBQ2MsR0FBRCxDQUFiO0FBQ0QsQ0FMRDs7ZUFNZUgsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgZ2V0RGF0YSBmcm9tICcuL2dldERhdGEuanMnO1xuXG5jb25zdCBwcm9wcyA9IFtcbiAge1xuICAgIHR5cGU6ICd1bmNoZW5nZWQnLFxuICAgIGNoZWNrOiAoYmVmb3JlLCBhZnRlciwga2V5KSA9PiAoXy5oYXMoYmVmb3JlLCBrZXkpICYmIF8uaGFzKGFmdGVyLCBrZXkpICYmIChiZWZvcmVba2V5XSA9PT0gYWZ0ZXJba2V5XSkpLFxuICAgIHByb2Nlc3M6IChiZWZvcmUpID0+IGJlZm9yZSxcbiAgICBwcmVmaXg6ICcgICAnLFxuICB9LFxuICB7XG4gICAgdHlwZTogJ2NoZW5nZWQnLFxuICAgIGNoZWNrOiAoYmVmb3JlLCBhZnRlciwga2V5KSA9PiAoXy5oYXMoYmVmb3JlLCBrZXkpICYmIF8uaGFzKGFmdGVyLCBrZXkpICYmIChiZWZvcmVba2V5XSAhPT0gYWZ0ZXJba2V5XSkpLFxuICAgIHByb2Nlc3M6IChiZWZvcmUsIGFmdGVyKSA9PiAoeyBiZWZvcmVWYWx1ZTogYmVmb3JlLCBhZnRlclZhbHVlOiBhZnRlciB9KSxcbiAgICBwcmVmaXg6ICcgICsnLFxuICB9LFxuICB7XG4gICAgdHlwZTogJ2FkZGVkJyxcbiAgICBjaGVjazogKGJlZm9yZSwgYWZ0ZXIsIGtleSkgPT4gKCFfLmhhcyhiZWZvcmUsIGtleSkgJiYgXy5oYXMoYWZ0ZXIsIGtleSkpLFxuICAgIHByb2Nlc3M6IChiZWZvcmUsIGFmdGVyKSA9PiBhZnRlcixcbiAgICBwcmVmaXg6ICcgICsnLFxuICB9LFxuICB7XG4gICAgdHlwZTogJ2RlbGV0ZWQnLFxuICAgIGNoZWNrOiAoYmVmb3JlLCBhZnRlciwga2V5KSA9PiAoXy5oYXMoYmVmb3JlLCBrZXkpICYmICFfLmhhcyhhZnRlciwga2V5KSksXG4gICAgcHJvY2VzczogKGJlZm9yZSkgPT4gYmVmb3JlLFxuICAgIHByZWZpeDogJyAgLScsXG4gIH0sXG5dO1xuXG5jb25zdCBwYXJzZSA9IChiZWZvcmUsIGFmdGVyKSA9PiB7XG4gIGNvbnN0IHRlbXBPYmogPSB7IC4uLmJlZm9yZSwgLi4uYWZ0ZXIgfTtcbiAgY29uc3QgY29uZmlnS2V5cyA9IF8ua2V5cyh0ZW1wT2JqKTtcbiAgY29uc3QgZ2V0UHJvcHMgPSAoa2V5KSA9PiBwcm9wcy5maW5kKCh7IGNoZWNrIH0pID0+IGNoZWNrKGJlZm9yZSwgYWZ0ZXIsIGtleSkpO1xuICByZXR1cm4gY29uZmlnS2V5cy5tYXAoKGtleSkgPT4ge1xuICAgIGNvbnN0IHsgcHJlZml4LCB0eXBlLCBwcm9jZXNzIH0gPSBnZXRQcm9wcyhrZXkpO1xuICAgIGNvbnN0IHZhbHVlID0gcHJvY2VzcyhiZWZvcmVba2V5XSwgYWZ0ZXJba2V5XSwgcGFyc2UpO1xuICAgIHJldHVybiB7XG4gICAgICBrZXksIHR5cGUsIHZhbHVlLCBwcmVmaXgsXG4gICAgfTtcbiAgfSk7XG59O1xuY29uc3QgcmVuZGVyID0gKHRyZWUpID0+IHtcbiAgY29uc3QgcmVuZGVyU3RyaW5nID0gdHJlZS5tYXAoKG5vZGUpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBrZXksIHR5cGUsIHZhbHVlLCBwcmVmaXgsXG4gICAgfSA9IG5vZGU7XG4gICAgY29uc3QgcmVuZGVyVHlwZSA9IHtcbiAgICAgIHVuY2hlbmdlZDogYCR7cHJlZml4fSAke2tleX06ICR7dmFsdWV9YCxcbiAgICAgIGNoZW5nZWQ6IGAke3ByZWZpeH0gJHtrZXl9OiAke3ZhbHVlLmJlZm9yZVZhbHVlfVxcbiAgLSAke2tleX06ICR7dmFsdWUuYWZ0ZXJWYWx1ZX1gLFxuICAgICAgYWRkZWQ6IGAke3ByZWZpeH0gJHtrZXl9OiAke3ZhbHVlfWAsXG4gICAgICBkZWxldGVkOiBgJHtwcmVmaXh9ICR7a2V5fTogJHt2YWx1ZX1gLFxuICAgIH07XG4gICAgcmV0dXJuIHJlbmRlclR5cGVbbm9kZS50eXBlXTtcbiAgfSk7XG5cbiAgY29uc3QgcmVuZGVyQm9keSA9IGB7XFxuJHtyZW5kZXJTdHJpbmcuam9pbignXFxuJyl9XFxufWA7XG4gIHJldHVybiByZW5kZXJCb2R5O1xufTtcblxuY29uc3QgZ2VuRGlmZiA9IChmaXJzdENvbmZpZyA9IHt9LCBzZWNvbmRDb25maWcgPSB7fSkgPT4ge1xuICBjb25zdCBiZWZvcmUgPSBnZXREYXRhKGZpcnN0Q29uZmlnKTtcbiAgY29uc3QgYWZ0ZXIgPSBnZXREYXRhKHNlY29uZENvbmZpZyk7XG4gIGNvbnN0IGFzdCA9IHBhcnNlKGJlZm9yZSwgYWZ0ZXIpO1xuICByZXR1cm4gcmVuZGVyKGFzdCk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZ2VuRGlmZjtcbiJdfQ==